--- 
# Tiny Tapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - ALU1.v
    - alu4.v
    - top_tt_um_dlmiles_alu4.v
    - tb.v
  top_module:  "tt_um_dlmiles_alu4"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 3x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Darryl Miles"
  title:        "ALU unit (4-bit ~19 operation)"
  language:     "Verilog"
  description:  "Combinational Arithmetic Logic Unit"

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      Combinational arithmetic logic unit (no clock in use)
      Has ZERO and OVERFLOW outputs.
      Achieves operations in around 67 sky130 cells.

      TODO
      
      SUM
        ADD (logic-shift-left), ADC
        SUB, SBC
      AND
      OR
      XOR
      ONES (invert)
      TWOS (negate)
      CLB (clear-bits, AND ~B)
      TOB (toggle-inverted-bits, XOR ~B, free op)
      SEB (set-inverted-bits, OR ~B, free op)
      ALL0 (all bits clear at output)
      ALL1 (all bits set at output)
      INC1 (increment by one, there is also ADD+carry_in+Bzero)
      DEC1 (decrement by one)
      LSR (with/without carry_in at MSB)
      ASR
      ROR

      OP_A_MODE == 2'b00 SUM (ADD, SUB, ADC, SBC, LSL)
      OP_A_MODE == 2'b01 AND
      OP_A_MODE == 2'b10 OR
      OP_A_MODE == 2'b11 XOR

      OP_Y_MODE == 2'b00 NORMAL
      OP_Y_MODE == 2'b01 SET (set to 1)
      OP_Y_MODE == 2'b10 CLEAR (set to 0)
      OP_Y_MODE == 2'b11 MSB (taken from A[MSB])

      OP_B_MODE == 2'b00 NORMAL
      OP_B_MODE == 2'b01 ONELSB (set B[LSB] from CARRY_IN, mainly for decrement by one use case)
      OP_B_MODE == 2'b10 CLEAR (all bits reset, was called Bzero)
      OP_B_MODE == 2'b11 LSR (logical shift right, with carry_in at MSB)

      ~14 operation is around 52 single-function-logic-cell (2 x AND2, 2 x OR2, 2 x XOR2, 1 x INV, 5 x MUX2) per bit.
      Plus ~total-bits minus 1 for Zero (assuming cascaded OR2), Plus 2 x XOR2 for Overflow.

      Adding logical-shift-right adds another (1 x AND2, 1 x OR2) per bit, plus 1 x INV.  Which effectively constructs
      an N-bit MUX2 with OR output joiner.  This added ~5 single-function-logic-cell.

      Refactoring out OP_Y_MODE controls.  This did not change gate count (+-2 lost in cell implementation) :)

      Moving LSR/ASR to A input.  Which removes the need for CPU ID (insn decoder) to manage this special case of
      supply main value on B and zero on A.

      Finally Adding ROR.  This is the icing and completes all the required functionality.

      There is a case for INC2/DEC2 optimization in ALU (due to 16bit opcode size and ~16bit address computation, an
      example use case is PC+2 return address computation, because maybe an opcode is 32bit as it encodes a far 16bit
      address).

      The ALU used in a CPU has some common B input requirements, NORMAL, ZERO (all bit reset), ONE (the value one,
      bit0 set), LSR1 (logical shift right).

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      Setup the input state expect immediate output (after gate propagation delays).

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - A[0]
    - A[1]
    - A[2]
    - A[3]
    - B[0]
    - B[1]
    - B[2]
    - B[3]
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - R[0]
    - R[1]
    - R[2]
    - R[3]
    - unused
    - Rzero (o)
    - Roverflow (o)
    - carry_out (o)
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - carry_in (i)
    - Binv (i)
    - OP_A_MODE[0] (i)
    - OP_A_MODE[1] (i)
    - OP_Y_MODE[0] (i)
    - OP_Y_MODE[1] (i)
    - OP_B_MODE[0] (i)
    - OP_B_MODE[1] (i)

# The following fields are optional
  tag:          "alu"      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      ""      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     10000000       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository (must be 512kb or less)
