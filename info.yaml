--- 
# Tiny Tapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - ALU1.v
    - alu4.v
    - top_tt_um_dlmiles_alu4.v
    - tb.v
  top_module:  "tt_um_dlmiles_alu4"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 3x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Darryl Miles"
  title:        "ALU unit (4-bit ~14 operation)"
  language:     "Verilog"
  description:  "Combinational Arithmetic Logic Unit"

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      Combinational arithmetic logic unit (no clock in use)
      Has ZERO and OVERFLOW outputs.

      TODO
      
      SUM
        ADD (logic-shift-left), ADC
        SUB, SBC
      AND
      OR
      XOR
      ONES (invert)
      TWOS (negate)
      CLB (clear-bits, AND ~B)
      TOB (toggle-inverted-bits, XOR ~B)
      SEB (set-inverted-bits, OR ~B)
      ALL0
      ALL1
      
      OP == 2'b00 SUM (ADD, SUB, ADC, SBC)
      OP == 2'b01 AND
      OP == 2'b10 OR
      OP == 2'b11 XOR

      logical-shift-right (being considered)

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      Setup the input state expect immediate output (after gate propagation delays).

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - A[0]
    - A[1]
    - A[2]
    - A[3]
    - B[0]
    - B[1]
    - B[2]
    - B[3]
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - R[0]
    - R[1]
    - R[2]
    - R[3]
    - unused
    - Rzero (o)
    - Roverflow (o)
    - carry_out (o)
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - carry_in (i)
    - Bzero (i)
    - Binv (i)
    - OP[0] (i)
    - OP[1] (i)
    - Blsr (i)
    - unused
    - unused

# The following fields are optional
  tag:          "alu"      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      ""      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     10000000       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository (must be 512kb or less)
